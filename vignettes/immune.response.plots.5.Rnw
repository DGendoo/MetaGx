\pagebreak

<<read_gmt>>=
sink("/dev/null")
gmt.contents <- GSA::GSA.read.gmt("c5.all.v5.0.entrez.gmt")
sink()
geneset.name <- "IMMUNE_RESPONSE"
immune.index <- which(gmt.contents$geneset.names == geneset.name)
immune.entrez.ids <- unlist(gmt.contents$genesets[immune.index])

immune.survival.data.tertiles.by.eset <- lapply(esets.with.data.annotation, function(y) {
  intersecting.immune.entrez.ids <- intersect(fData(y)$EntrezGene.ID, immune.entrez.ids)
  current.immune.survival.df <- get.survival.data.for.plotting(y, entrez.ids=intersecting.immune.entrez.ids, num.quantiles=3, survival.type="overall.survival", time.unit="years", gene.name.as.output.colname=FALSE, additional.colnames.to.keep = c("Helland.subtypes", "Verhaak.subtypes", "Bentink.Haibe.Kains.subtypes"))
    return(current.immune.survival.df)
})

immune.survival.data.tertiles.by.eset <- lapply(immune.survival.data.tertiles.by.eset, function(x) x[,!grepl(".quantile", colnames(x))])

immune.survival.data.tertiles.by.eset <- immune.survival.data.tertiles.by.eset[sapply(immune.survival.data.tertiles.by.eset, function(x) nrow(x) > 0)] 

pc1.val.list <- lapply(immune.survival.data.tertiles.by.eset, function(x) {
    # columns are patients, rows are genes
  expression.df <- t(x[,grepl(".expression", colnames(x))])
  pc1 <- prcomp(expression.df)$rotation[,1]
  return(pc1)
  })
num.quantiles <- 3
pc1.quantile.list <- lapply(pc1.val.list, function(pc1) cut(pc1, breaks=quantile(pc1, probs=seq(0,1,length=num.quantiles+1)), include.lowest=TRUE))

if(num.quantiles==2) {
  pc1.quantile.list <- lapply(pc1.quantile.list, function(x) {levels(x) <- c("Low", "High"); return(x)})
} else if(num.quantiles==3) {
  pc1.quantile.list <- lapply(pc1.quantile.list, function(x) {levels(x) <- c("Low", "Mid", "High"); return(x)})
} else {
  pc1.quantile.list <- lapply(pc1.quantile.list, function(x) {levels(x) <- paste0("PC1.quantile.", 1:num.quantiles); return(x)})
}

immune.survival.data.tertiles.by.eset <- lapply(names(pc1.val.list), function(x) {
  immune.survival.data.tertiles.by.eset[[x]]$pc1.val <- pc1.val.list[[x]]
  immune.survival.data.tertiles.by.eset[[x]]$pc1.quantile <- pc1.quantile.list[[x]]
  return(immune.survival.data.tertiles.by.eset[[x]])
  })
names(immune.survival.data.tertiles.by.eset) <- names(pc1.val.list)

immune.survival.data.tertiles.by.eset <- lapply(immune.survival.data.tertiles.by.eset, function(x) x[,!grepl(".expression", colnames(x))])

survival.data.immune.genes <- do.call(rbind, immune.survival.data.tertiles.by.eset)
@

\section{Gene Ontology Gene Set: \Sexpr{geneset.name}}
\noindent Expression values for all genes were present in \Sexpr{nrow(survival.data.immune.genes)} patients from \Sexpr{length(unique(survival.data.immune.genes$data.source))} datasets. We performed principal components analysis on the gene expression values for \Sexpr{length(immune.entrez.ids)} immune-response genes from the Gene Ontology database, and used the value of the first principal component as the risk score. PCA and tertile stratification were performed on datasets individually, and Low/Mid/High classifications were combined.

<<GO_gene_pca_dataset_table, results='asis'>>=
print(.get.ordered.data.table(survival.data.immune.genes$data.source), include.rownames=FALSE)
@


<<GO_gene_pca_survival_all, fig.width=5, fig.height=5, out.width="0.6\\textwidth">>=
surv.time <- survival.data.immune.genes$years_to_event
surv.event <- survival.data.immune.genes$event_status
groups <- survival.data.immune.genes$pc1.quantile
risk.vals <- -survival.data.immune.genes$pc1.val
group.names <- paste("PC1", levels(survival.data.immune.genes[,"pc1.quantile"]))
datasets <- survival.data.immune.genes$data.source
main.title <- paste("Survival: Immune genes, PC1")

stat.objects.survplot <- create.survival.plot(
  surv.time = surv.time,
  surv.event = surv.event,
  groups <- groups,
  risk.vals = risk.vals,
  group.names = group.names,
  datasets = datasets,
  xlab = "Time (years)",
  main = main.title,
  time.cens=10,
  stats.to.show = c("n", "p", "d")
)
@
\pagebreak
\noindent Survival by the Tothill subtypes (using our implementation of their subtype classifer described in Helland et al.)
<<immune_genes_pca_survival_Helland_subtypes>>=
par(mfrow=c(2,2))
for(current.helland.subtype in levels(survival.data.immune.genes$Helland.subtypes)) {
  cases.to.include <- survival.data.immune.genes$Helland.subtypes == current.helland.subtype
  surv.time <- survival.data.immune.genes$years_to_event[cases.to.include]
  surv.event <- survival.data.immune.genes$event_status[cases.to.include]
  groups <- survival.data.immune.genes$pc1.quantile[cases.to.include]
  risk.vals <- -survival.data.immune.genes$pc1.val[cases.to.include]
  group.names <- paste("PC1", levels(survival.data.immune.genes[,"pc1.quantile"][cases.to.include]))
  datasets <- survival.data.immune.genes$data.source[cases.to.include]
  main.title <- paste("Survival: Immune genes, PC1", "in subtype", current.helland.subtype)
  
  create.survival.plot(
    surv.time = surv.time,
    surv.event = surv.event,
    groups <- groups,
    risk.vals = risk.vals,
    group.names = group.names,
    datasets = datasets,
    xlab = "Time (years)",
    main = main.title,
    time.cens=10,
    stats.to.show = c("n", "p", "d")
  )
}
@

\pagebreak
\noindent Survival by the TCGA subtypes (using our implementation of their subtype classifer described in Verhaak et al.)
<<immune_genes_pca_survival_Verhaak_subtypes>>=
par(mfrow=c(2,2))
for(current.verhaak.subtype in levels(survival.data.immune.genes$Verhaak.subtypes)) {
  cases.to.include <- survival.data.immune.genes$Verhaak.subtypes == current.verhaak.subtype
  surv.time <- survival.data.immune.genes$years_to_event[cases.to.include]
  surv.event <- survival.data.immune.genes$event_status[cases.to.include]
  groups <- survival.data.immune.genes$pc1.quantile[cases.to.include]
  risk.vals <- -survival.data.immune.genes$pc1.val[cases.to.include]
  group.names <- paste("PC1", levels(survival.data.immune.genes[,"pc1.quantile"][cases.to.include]))
  datasets <- survival.data.immune.genes$data.source[cases.to.include]
  main.title <- paste("Survival: Immune genes, PC1", "in subtype", current.verhaak.subtype)
  
  create.survival.plot(
    surv.time = surv.time,
    surv.event = surv.event,
    groups <- groups,
    risk.vals = risk.vals,
    group.names = group.names,
    datasets = datasets,
    xlab = "Time (years)",
    main = main.title,
    time.cens=10,
    stats.to.show = c("n", "p", "d")
  )
}
@

\pagebreak
\noindent Survival by the Bentink subtypes (using our implementation of their subtype classifer in \texttt{genefu})
<<immune_genes_pca_survival_Bentink_subtypes, fig.width=10, fig.height=5.5>>=
par(mfrow=c(1,2))
for(current.bentink.subtype in levels(survival.data.immune.genes$Bentink.Haibe.Kains.subtypes)) {
  cases.to.include <- survival.data.immune.genes$Bentink.Haibe.Kains.subtypes == current.bentink.subtype
  surv.time <- survival.data.immune.genes$years_to_event[cases.to.include]
  surv.event <- survival.data.immune.genes$event_status[cases.to.include]
  groups <- survival.data.immune.genes$pc1.quantile[cases.to.include]
  risk.vals <- -survival.data.immune.genes$pc1.val[cases.to.include]
  group.names <- paste("PC1", levels(survival.data.immune.genes[,"pc1.quantile"][cases.to.include]))
  datasets <- survival.data.immune.genes$data.source[cases.to.include]
  main.title <- paste("Survival: Immune genes, PC1", "in subtype\n", current.bentink.subtype)
  
  create.survival.plot(
    surv.time = surv.time,
    surv.event = surv.event,
    groups <- groups,
    risk.vals = risk.vals,
    group.names = group.names,
    datasets = datasets,
    xlab = "Time (years)",
    main = main.title,
    time.cens=10,
    stats.to.show = c("n", "p", "d")
  )
}
@