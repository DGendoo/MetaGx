%\VignetteEngine{knitr::knitr}
\documentclass{article}

\usepackage{graphicx}
\usepackage{microtype}
\usepackage[T1]{fontenc}
\usepackage[latin1]{inputenc}
\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}


\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
# Set options
knitr::opts_chunk$set(include=TRUE, results="hide", fig.width=8, fig.height=8, fig.path='figures/', fig.align='center',
fig.show='hold',warning=FALSE, echo=FALSE, message=FALSE)
options(replace.assign=TRUE,width=90)
@

\title{Reproduction of Published Ovarian Subtyping Schemes}

%\author{Gregory M. Chen}
\maketitle

\tableofcontents 

<<load>>=
library(gdata)
library(xtable)
library(Biobase)
library(GSVA)
library(sparsediscrim)
library(MetaGx2)
library(MetaGxOvarian)
source(system.file("extdata", "patientselection.config", package="MetaGxOvarian"))
#source(system.file("extdata", "reproduce.results.patientselection.config", package="MetaGx2"))
#source("../inst/extdata/reproduce.results.patientselection.config")
### use this line if you do not want to get rid of duplicates
rm(remove.duplicates)
rm(probe.gene.mapping)
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))

get.gene.mapping <- function(eset) {
  Biobase::exprs(eset) <- exprs(eset)[fData(eset)$best_probe,]
  Biobase::fData(eset) <- fData(eset)[fData(eset)$best_probe,]
  rownames(fData(eset)) <- rownames(exprs(eset)) <- paste("geneid.", fData(eset)$EntrezGene.ID, sep="")
  return(eset)
}
@

% Verhaak et al., 2013

<<verhaak, eval=TRUE>>=
source("../R/getVerhaakSubtypes.R")
verhaak.spreadsheet.data <- read.xls("../inst/extdata/JCI65833sd1.xls", skip=1)
## Examine the correlation between normalized ssGSEA scores in the Tothill dataset, as predicted by our implementation and that of Verhaak et al.
verhaak.validation.esets <- list(Bonome=esets$GSE26712,
                                 Crijns=esets$GSE13876, 
                                 Denkert=esets$GSE14764, 
                                 Dressman=esets$PMID17290060, 
                                 TCGA=esets$TCGA, # This contains the full TCGA set, but we will filter to the validation data later
                                 Tothill=esets$GSE9891, 
                                 Yoshihara=esets$GSE17260)

verhaak.validation.esets <- lapply(verhaak.validation.esets, get.gene.mapping)
implemented.verhaak.output <- lapply(verhaak.validation.esets, getVerhaakSubtypes)



implemented.ssgsea.scores <- data.frame(Dataset.name=character(0), sample.name=character(0), DIF=numeric(0), IMR=numeric(0), MES=numeric(0), PRO=numeric(0))

for(i in 1:length(implemented.verhaak.output)) {
  current.implemented.ssgsea.scores <- as.data.frame(implemented.verhaak.output[[i]][[2]])
  Dataset.name <- names(implemented.verhaak.output)[i]
  # Find the sample names corresponding to the names provided in the Verhaak et al. supplementary spreadsheet
  if(Dataset.name == "Bonome") {
    sample.name <- sub(".* ", "", pData(verhaak.validation.esets[[i]])$alt_sample_name)
  } else if(Dataset.name == "Crijns") {
    sample.name <- as.character(pData(verhaak.validation.esets[[i]])$unique_patient_ID)
  } else if(Dataset.name == "Denkert") {
     sample.name <- sub("GSE14764_", "", rownames(pData(verhaak.validation.esets[[i]])))
  } else if(Dataset.name == "Dressman") {
    sample.name <- sub("PMID17290060_X", "", rownames(pData(verhaak.validation.esets[[i]])))
  } else if(Dataset.name == "TCGA") {
    sample.name <- as.character(pData(verhaak.validation.esets[[i]])$unique_patient_ID)
  }  else if(Dataset.name == "Tothill") {
    sample.name <- sub("GSE9891_", "", rownames(pData(verhaak.validation.esets[[i]])))
  }  else if(Dataset.name == "Yoshihara") {
    sample.name <- sub("GSE17260_", "", rownames(pData(verhaak.validation.esets[[i]])))
  }
  current.ssgsea.scores <- as.data.frame(implemented.verhaak.output[[i]][[2]])
  implemented.ssgsea.scores <- rbind(implemented.ssgsea.scores, data.frame(
                                                                      Dataset.name=Dataset.name,
                                                                      sample.name=sample.name,
                                                                      DIF=current.ssgsea.scores$DIF,
                                                                      IMR=current.ssgsea.scores$IMR,
                                                                      MES=current.ssgsea.scores$MES,
                                                                      PRO=current.ssgsea.scores$PRO))
}

implemented.ssgsea.scores$Dataset.name <- as.character(implemented.ssgsea.scores$Dataset.name)
implemented.ssgsea.scores$Dataset.name[implemented.ssgsea.scores$Dataset.name == "TCGA"] <- "TCGA-validation"
implemented.ssgsea.scores$Dataset.name <- as.factor(implemented.ssgsea.scores$Dataset.name)

verhaak.spreadsheet.data <- verhaak.spreadsheet.data[c(1,2,13,grep(".ssGSEA.normalized.score", colnames(verhaak.spreadsheet.data)))]
levels(implemented.ssgsea.scores$Dataset.name) <- toupper(levels(implemented.ssgsea.scores$Dataset.name))
levels(implemented.ssgsea.scores$sample.name) <- toupper(levels(implemented.ssgsea.scores$sample.name))
levels(verhaak.spreadsheet.data$ID) <- toupper(levels(verhaak.spreadsheet.data$ID))
levels(verhaak.spreadsheet.data$DATASET) <- toupper(levels(verhaak.spreadsheet.data$DATASET))

verhaak.spreadsheet.data$CloverLeaf <- as.character(verhaak.spreadsheet.data$CloverLeaf)
verhaak.spreadsheet.data$CloverLeaf <- sub("_Good", "", as.character(verhaak.spreadsheet.data$CloverLeaf))
verhaak.spreadsheet.data$CloverLeaf <- sub("_Poor", "", as.character(verhaak.spreadsheet.data$CloverLeaf))
verhaak.spreadsheet.data$CloverLeaf <- as.factor(verhaak.spreadsheet.data$CloverLeaf)

colnames(implemented.ssgsea.scores)[1:2] <- c("DATASET", "ID")

# subtypes predicted by our implementation
verhaak.predicted.subtypes <- pData(implemented.verhaak.output$Annotated.eset)[,colnames(pData(implemented.verhaak.output$Annotated.eset))=="Verhaak.subtypes",drop=FALSE]

merged <- merge(implemented.ssgsea.scores, verhaak.spreadsheet.data, by=c("DATASET", "ID"))

# Plot correlations between ssGSEA scores
plot(merged$DIF, merged$Differentiated.ssGSEA.normalized.score)
plot(merged$IMR, merged$Immunoreactive.ssGSEA.normalized.score)
plot(merged$MES, merged$Mesenchymal.ssGSEA.normalized.score)
plot(merged$PRO, merged$Proliferative.ssGSEA.normalized.score)

cor(merged$DIF, merged$Differentiated.ssGSEA.normalized.score)
cor(merged$IMR, merged$Immunoreactive.ssGSEA.normalized.score)
cor(merged$MES, merged$Mesenchymal.ssGSEA.normalized.score)
cor(merged$PRO, merged$Proliferative.ssGSEA.normalized.score)


mean(apply(merged[,3:6],1,which.max) == apply(merged[,8:11],1,which.max))
@


<<konecny, results='asis'>>=
source("../R/getKonecnySubtypes.R")
# validate on Bonome dataset
bonome.eset <- get.gene.mapping(esets$GSE26712)
implemented.konecny.out <- getKonecnySubtypes(bonome.eset)
konecny.spreadsheet.data <- read.xls("../inst/extdata/jnci_JNCI_14_0249_s06.xls")
# subtypes generated by our implementation
konecny.predicted.subtypes <- pData(implemented.konecny.out$Annotated.eset)[,colnames(pData(implemented.konecny.out$Annotated.eset))=="Konecny.subtypes",drop=FALSE]
rownames(konecny.predicted.subtypes) <- sub("GSE26712_", "", rownames(konecny.predicted.subtypes))

rownames(konecny.spreadsheet.data) <- konecny.spreadsheet.data$X

merged <- merge(konecny.predicted.subtypes, konecny.spreadsheet.data[,"Mayo_assgn_subtype_vec",drop=FALSE], by="row.names")
rownames(merged) <- merged$Row.names
merged <- merged[,-1]

merged$Konecny.subtypes <- as.factor(gsub("[^0-9]", "", merged$Konecny.subtypes))
merged$Mayo_assgn_subtype_vec <- as.factor(merged$Mayo_assgn_subtype_vec)
# Remove observations which the authors left unclassified
merged <- merged[complete.cases(merged),]
merged[] <- sapply(merged, function(x) {levels(x) <- paste0("c", levels(x)); as.factor(x)})
merged$Konecny.subtypes <- as.factor(merged$Konecny.subtypes)
merged$Mayo_assgn_subtype_vec <- as.factor(merged$Mayo_assgn_subtype_vec)
addtorow <- list()
addtorow$pos <- list()
addtorow$pos[[1]] <- 0
addtorow$pos[[2]] <- 0
addtorow$command <- c('& Konecny Subtypes from Supplementary & & &\\\\\n', "Implemented Konecny Subtypes & c1 & c2 & c3 & c4 \\\\\n")
print(xtable(as.table(ftable(merged))), add.to.row=addtorow, include.colnames=FALSE)
@
\end{document}
