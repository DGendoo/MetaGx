%\VignetteEngine{knitr::knitr}
\documentclass{article}

\usepackage{graphicx}
\usepackage{microtype}
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage[latin1]{inputenc}
\usepackage{geometry}
\usepackage{titlesec}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage[table]{xcolor}
%\newcommand{\sectionbreak}{\clearpage}

\begin{document}

\title{Metabolic Genes and Breast Cancer}

\author{Gregory M. Chen}
\date{\today}
\maketitle

<<setup, include=FALSE, cache=FALSE>>=
# Set options
knitr::opts_chunk$set(include=TRUE, results="hide", fig.width=8, fig.height=8, fig.path='figures/', fig.align='center', fig.show='hold',warning=FALSE, echo=FALSE, message=FALSE, cache=TRUE)
options(replace.assign=TRUE,width=90)
days.per.month <- 30.4368
days.per.year <- 365.242
par.original <- par()
library(knitr)
library(gdata)
library(annotate)
library(ggplot2)
library(xtable)
library(genefu)
library(hgu133plus2.db)
source("../R/create.survival.plot.R")
source("../R/stripWhiteSpace.R")
source("../R/getSubtype.R")
source("../R/datasetMerging.R")
source("../R/get.survival.data.for.plotting.R")
source("../R/subtypeClassification.R")
source("../R/setSubtype.R")
@


<<load_data, cache=TRUE>>=
source("../inst/extdata/brca.patientselection.config")
source(system.file("extdata", "createEsetList.R", package="MetaGxBreast"))

# order by publication date. Note that EXPO was set to the year it was public on GEO (2005).
publication.dates <- read.table("../inst/extdata/MetaGxBreast_publication_dates.txt", header=TRUE, stringsAsFactors = FALSE)
if(!all(names(esets) %in% publication.dates$Dataset)) {
  stop("Not all eset names are present in MetaGxBreast_publication_dates.txt")
}
publication.dates <- publication.dates[publication.dates$Dataset %in% names(esets),]
publication.dates <- publication.dates[order(publication.dates$Publication_date),]
# publication.dates$Dataset is guaranteed to be equal to names(esets)
esets <- esets[publication.dates$Dataset]


esets <- lapply(esets, function(x) {
  factor.indices <- sapply(pData(x), is.factor)
  pData(x)[factor.indices] <- lapply(pData(x)[factor.indices], as.character)
  return(x)
  })

## Populate the "days_to_death" field in phenotypic data of TCGA for status "living"
tcga.clinical.data <- read.delim("nationwidechildrens.org_clinical_patient_brca.txt", skip=1, stringsAsFactors = FALSE)
tcga.clinical.data <- tcga.clinical.data[,c("bcr_patient_uuid", "days_to_last_followup")]
tcga.clinical.data <- tcga.clinical.data[-1,]
tcga.clinical.data <- tcga.clinical.data[tcga.clinical.data$days_to_last_followup != "[Not Available]",]
tcga.clinical.data$days_to_last_followup <- as.integer(tcga.clinical.data$days_to_last_followup)
tcga.clinical.data <- tcga.clinical.data[!is.na(match(tcga.clinical.data$bcr_patient_uuid, esets$TCGA$unique_patient_ID)),]

esets$TCGA$days_to_death[match(tcga.clinical.data$bcr_patient_uuid, esets$TCGA$unique_patient_ID)] <- tcga.clinical.data$days_to_last_followup

metabolic.genes <- read.table("metabolic.genes", sep="\t", header=TRUE)
gene.names <- metabolic.genes$Gene.name
entrez.ids <- metabolic.genes$Entrez.ID

# For each dataset: if it contains some patients with the genes, remove patients with NA values for these genes
#esets <- lapply(esets, function(eset) {
#  for(entrez.id in entrez.ids) {
#    if(entrez.id %in% fData(eset)$EntrezGene.ID) {
#      index <- which(fData(eset)$EntrezGene.ID == entrez.id)
#      eset <- eset[, !is.na(exprs(eset)[index,,drop=FALSE]) ]
#      }
#  }
#  return(eset)
#})

# For each dataset, remove genes that are not represented in all patients
#esets <- lapply(esets, function(eset) eset[complete.cases(exprs(eset)),])

# only keep patients with survival data
esets <- lapply(esets, function(eset) eset[,!is.na(eset$days_to_death) & !is.na(eset$vital_status)])

## Remove datasets that are empty
esets <- esets[sapply(esets, function(x) ncol(exprs(x)) > 0)]

esets <- lapply(esets, function(x) {
  x <- subtypeClassification(x, model = "scmod2")
  x$subtype <- experimentData(x)@other$class
  return(x)
  })

pooled.eset <- datasetMerging(esets, nthread=2)
@

\tableofcontents
\section{Datasets}

From MetaGxBreast, we selected patients from studies which tracked overall survival. We identified \Sexpr{sum(sapply(esets, function(x) ncol(exprs(x))))} patients from \Sexpr{length(esets)} datasets.
<<Dataset_table, results='asis'>>=

.get.ordered.data.table <- function(data.source) {
  data.source <- as.character(data.source)
  data.counts <- as.data.frame(addmargins(table(data.source)))
  data.counts$Freq <- as.integer(data.counts$Freq)
  colnames(data.counts) <- c("Dataset name", "Number of samples")
  return(xtable(data.counts))
}

data.counts <- as.data.frame(sapply(esets, function(x) ncol(exprs(x))))
colnames(data.counts) <- "Number of samples"
data.counts <- rbind(data.counts, sum(data.counts[,1]))
rownames(data.counts)[nrow(data.counts)] <- "Sum"
xtable(data.counts)
@

<<single_gene, cache=FALSE, include=FALSE>>=
single.gene.knitr.text <- lapply(1:length(entrez.ids), function(current.index) knit_expand(file='single.gene.brca.survival.Rnw'))
#single.gene.knitr.text <- lapply(1:1, function(current.index) knit_expand(file='single.gene.brca.survival.Rnw'))
@

\Sexpr{knit(text=unlist(single.gene.knitr.text))}

\end{document}