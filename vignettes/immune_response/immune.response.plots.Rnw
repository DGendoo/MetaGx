%\VignetteEngine{knitr::knitr}
\documentclass{article}

\usepackage{graphicx}
\usepackage{microtype}
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage[latin1]{inputenc}
\usepackage{geometry}
\usepackage{titlesec}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage[table]{xcolor}
%\newcommand{\sectionbreak}{\clearpage}

\begin{document}

\title{Immune-response Signatures with Ovarian Subtypes}

\author{Gregory M. Chen}
\date{\today}
\maketitle

<<setup, include=FALSE, cache=FALSE>>=
# Set options
knitr::opts_chunk$set(include=TRUE, results="hide", fig.width=8, fig.height=8, fig.path='figures/', fig.align='center', fig.show='hold',warning=FALSE, echo=FALSE, message=FALSE, cache=TRUE)
options(replace.assign=TRUE,width=90)
days.per.month <- 30.4368
days.per.year <- 365.242
par.original <- par()
library(gdata)
library(annotate)
library(GSVA)
library(ggplot2)
library(xtable)
library(genefu)
library(hgu133plus2.db)
source("../R/getHellandSubtypes.R")
source("../R/getBentinkHaibeKainsSubtypes.R")
source("../R/create.survival.plot.R")
source("../R/stripWhiteSpace.R")
source("../R/getVerhaakSubtypes.R")
source("../R/datasetMerging.R")
source("../R/getSubtype.R")
source("../R/get.survival.data.for.plotting.R") 
@


<<load_data, cache=TRUE>>=
source("../inst/extdata/hgs.patientselection.config")
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))
esets$GSE51088 <- esets$GSE51088[complete.cases(exprs(esets$GSE51088)),]

esets <- lapply(esets, function(x) {
  factor.indices <- sapply(pData(x), is.factor)
  pData(x)[factor.indices] <- lapply(pData(x)[factor.indices], as.character)
  return(x)
  })

esets <- lapply(esets, function(x) getHellandSubtypes(x)[[1]])
esets <- lapply(esets, function(x) getVerhaakSubtypes(x)[[1]])
esets <- lapply(esets, function(x) getBentinkHaibeKainsSubtypes(x)[[1]])

pooled.eset <- datasetMerging(esets, method="intersect")
esets.with.data.annotation <- lapply(names(esets), function(x) {
  current.eset <- esets[[x]]
  current.eset$data.source <- x
  return(current.eset)
  })
names(esets.with.data.annotation) <- names(esets)
@

<<get_immune_response_data>>=
entrez.ids <- scan("immune.entrez.ids", what=integer(0))

# Get a list of lists of dataframes. 
individual.survival.dataframe.lists <- lapply(entrez.ids, function(entrez.id) {
  individual.survival.data.tertiles.by.eset <- lapply(esets.with.data.annotation, function(y) {
    if(!(entrez.id %in% fData(y)$EntrezGene.ID)) {
      return(NA)
      }
    get.survival.data.for.plotting(y, entrez.ids=entrez.id, num.quantiles=3, survival.type="overall.survival", time.unit="years", gene.name.as.output.colname=TRUE, additional.colnames.to.keep = c("Helland.subtypes", "Verhaak.subtypes", "Bentink.Haibe.Kains.subtypes"))
    })
  individual.survival.data.tertiles.by.eset <- individual.survival.data.tertiles.by.eset[sapply(individual.survival.data.tertiles.by.eset, function(x) !is.na(x) && nrow(x)>0)]
  individual.survival.data.tertiles.by.eset <- lapply(individual.survival.data.tertiles.by.eset, function(x) {
    colnames(x)[colnames(x)=="PDCD1LG1.quantile"]  <- "CD274.quantile"
    colnames(x)[colnames(x)=="PDCD1LG1.expression"]  <- "CD274.expression"
  return(x)
  })
  return(individual.survival.data.tertiles.by.eset)
  })

survival.data.individual.genes <- lapply(individual.survival.dataframe.lists, function(x) do.call(rbind, x))

gene.names <- sapply(survival.data.individual.genes, function(x) sub(".quantile", "", grep(".quantile",colnames(x), value=TRUE)))
  
names(individual.survival.dataframe.lists) <- gene.names
names(survival.data.individual.genes) <- gene.names

combined.genes.survival.list <- lapply(esets.with.data.annotation, function(y) {
  if(!all(entrez.ids %in% fData(y)$EntrezGene.ID)) {
    return(NA)
    }
  get.survival.data.for.plotting(y, entrez.ids=entrez.ids, num.quantiles=3, survival.type="overall.survival", time.unit="years", gene.name.as.output.colname=TRUE, additional.colnames.to.keep = c("Helland.subtypes", "Verhaak.subtypes", "Bentink.Haibe.Kains.subtypes"))
  })
combined.genes.survival.list <- combined.genes.survival.list[sapply(combined.genes.survival.list, function(x) !is.na(x) && nrow(x)>0)]
combined.genes.survival.list <- lapply(combined.genes.survival.list, function(x) {
  colnames(x)[colnames(x)=="PDCD1LG1.quantile"]  <- "CD274.quantile"
  colnames(x)[colnames(x)=="PDCD1LG1.expression"]  <- "CD274.expression"
  return(x)
  })
survival.data.combined.genes <- do.call(rbind, combined.genes.survival.list)

num.late.hgs <- nrow(pData(pooled.eset))
pooled.eset.complete.survival <- pooled.eset[,!is.na(pooled.eset$days_to_death) & !is.na(pooled.eset$vital_status)]
num.late.hgs.with.survival <- nrow(pData(pooled.eset.complete.survival))

@
\tableofcontents
\section{Datasets}

\Sexpr{length(unique(pooled.eset.complete.survival$data.source))} independent ovarian cancer gene expression datasets were identified from MetaGxOvarian. Of this meta-dataset, we identified \Sexpr{num.late.hgs} patients with late-stage, high-grade serous ovarian cancer, of which survival data was available for \Sexpr{num.late.hgs.with.survival} patients. For these datasets, expression values were pooled with quantile normalization.
<<Dataset_table, results='asis'>>=
.get.ordered.data.table <- function(data.source) {
  data.counts <- as.data.frame(addmargins(table(data.source)))
  data.counts$Freq <- as.integer(data.counts$Freq)
  data.counts <- data.counts[match(c("PMID17290060", "GSE26712", "GSE9891", "GSE13876", "GSE14764", "GSE18520", "GSE17260", "GSE26193", "TCGA", "E.MTAB.386", "GSE32062", "GSE49997", "GSE51088", "Sum"), data.counts[,1]),]
  data.counts <- data.counts[complete.cases(data.counts),]
  colnames(data.counts) <- c("Dataset name", "Number of samples")
  return(xtable(data.counts))
}

print(.get.ordered.data.table(pooled.eset.complete.survival$data.source), include.rownames=FALSE)
@

<<gene1, child='immune.response.plots.1.Rnw'>>=
@

<<gene2, child='immune.response.plots.2.Rnw'>>=
@

<<gene3, child='immune.response.plots.3.Rnw'>>=
@

<<gene4, child='immune.response.plots.4.Rnw'>>=
@

<<gene_ontology_pdfs, cache=FALSE, include=FALSE>>=
sink("/dev/null")
gmt.contents <- GSA::GSA.read.gmt("c5.all.v5.0.entrez.gmt")
sink()
immune.geneset.names <- grep("IMMUNE", gmt.contents$geneset.names, value = TRUE)
counter <- 1
for(geneset.name in immune.geneset.names) {
  print(counter)
  knit2pdf("immune.response.plots.5.Rnw", output=paste0("immune_response_", geneset.name, ".tex"))
  counter <- counter + 1
  }
@
\end{document}