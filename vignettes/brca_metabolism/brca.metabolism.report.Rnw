%\VignetteEngine{knitr::knitr}
\documentclass{article}

\usepackage{graphicx}
\usepackage{microtype}
\usepackage[T1]{fontenc}
\usepackage{float}
\usepackage[latin1]{inputenc}
\usepackage{geometry}
\usepackage{titlesec}
\usepackage{tabularx}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\usepackage[table]{xcolor}
%\newcommand{\sectionbreak}{\clearpage}

\begin{document}

\title{Metabolic Genes and Breast Cancer}

\author{Gregory M. Chen}
\date{\today}
\maketitle

<<setup, include=FALSE, cache=FALSE>>=
# Set options
knitr::opts_chunk$set(include=TRUE, results="hide", fig.width=8, fig.height=8, fig.path='figures/', fig.align='center', fig.show='hold',warning=FALSE, echo=FALSE, message=FALSE, cache=TRUE)
options(replace.assign=TRUE,width=90)
days.per.month <- 30.4368
days.per.year <- 365.242
par.original <- par()
library(knitr)
library(gdata)
library(annotate)
library(ggplot2)
library(xtable)
library(genefu)
library(hgu133plus2.db)
source("../../R/create.survival.plot.R")
source("../../R/stripWhiteSpace.R")
source("../../R/getSubtype.R")
source("../../R/datasetMerging.R")
source("../../R/get.survival.data.for.plotting.R")
source("../../R/subtypeClassification.R")
source("../../R/setSubtype.R")
source("../../R/create.forest.plot.R")
source("~/repos/MetaGx/R/stripWhiteSpace.R")

strata.term <- TRUE
meta.analysis <- FALSE
@


<<load_data, cache=TRUE>>=
source("../../inst/extdata/brca.patientselection.config")
source(system.file("extdata", "createEsetList.R", package="MetaGxBreast"))

# order by publication date. Note that EXPO was set to the year it was public on GEO (2005).
publication.dates <- read.table("../../inst/extdata/MetaGxBreast_publication_dates.txt", header=TRUE, stringsAsFactors = FALSE)
if(!all(names(esets) %in% publication.dates$Dataset)) {
  stop("Not all eset names are present in MetaGxBreast_publication_dates.txt")
}
publication.dates <- publication.dates[publication.dates$Dataset %in% names(esets),]
publication.dates <- publication.dates[order(publication.dates$Publication_date),]
# publication.dates$Dataset is guaranteed to be equal to names(esets)
esets <- esets[publication.dates$Dataset]


esets <- lapply(esets, function(x) {
  factor.indices <- sapply(pData(x), is.factor)
  pData(x)[factor.indices] <- lapply(pData(x)[factor.indices], as.character)
  return(x)
  })
esets <- lapply(esets, function(x) {
  x <- subtypeClassification(x, model = "scmod2")
  return(x)
  })
eset.names <- names(esets)
esets <- lapply(names(esets), function(x) {
  eset.toreturn <- esets[[x]]
  eset.toreturn$data.source <- x
  return(eset.toreturn)
  })
names(esets) <- eset.names

metabolic.genes <- read.table("metabolic.genes", sep="\t", header=TRUE, stringsAsFactors = FALSE)
gene.names <- metabolic.genes$Gene.name
entrez.ids <- metabolic.genes$Entrez.ID

# For each dataset: if it contains some patients with the genes, remove patients with NA values for these genes
#esets <- lapply(esets, function(eset) {
#  for(entrez.id in entrez.ids) {
#    if(entrez.id %in% fData(eset)$EntrezGene.ID) {
#      index <- which(fData(eset)$EntrezGene.ID == entrez.id)
#      eset <- eset[, !is.na(exprs(eset)[index,,drop=FALSE]) ]
#      }
#  }
#  return(eset)
#})

# For each dataset, remove genes that are not represented in all patients
#esets <- lapply(esets, function(eset) eset[complete.cases(exprs(eset)),])

# only keep patients with survival data
esets.os <- lapply(esets, function(eset) eset[,!is.na(eset$days_to_death) & !is.na(eset$vital_status)])
esets.rfs <- lapply(esets, function(eset) eset[,!is.na(eset$recurrence_status) | !is.na(eset$dmfs_status)])

## Remove datasets that are empty
esets.os <- esets.os[sapply(esets.os, function(x) ncol(exprs(x)) > 0)]
esets.rfs <- esets.rfs[sapply(esets.rfs, function(x) ncol(exprs(x)) > 0)]
esets.rfs.untreated <- lapply(esets.rfs, function(eset) eset[,!is.na(eset$treatment) & eset$treatment == "untreated"])
esets.rfs.untreated <- esets.rfs.untreated[sapply(esets.rfs.untreated, function(x) ncol(exprs(x))) >= 50]
rm(esets)
@

\tableofcontents
\pagebreak
\section{Datasets}

From MetaGxBreast, we selected patients from studies which tracked recurence-free survival. When recurrence-free survival was unavailable, we used distant metastatis-free survival.  We identified \Sexpr{sum(sapply(esets.rfs, function(x) ncol(exprs(x))))} patients from \Sexpr{length(esets.rfs)} datasets.
<<Dataset_table, results='asis'>>=
data.counts <- as.data.frame(sapply(esets.rfs, function(x) ncol(exprs(x))))
colnames(data.counts) <- "Number of samples"
data.counts <- rbind(data.counts, sum(data.counts[,1]))
rownames(data.counts)[nrow(data.counts)] <- "Sum"
xtable(data.counts)
@

Treatment status may be a confounder to patient outcome. We performed survival analysis our full dataset, as well as only the untreated patients:\footnote{Datasets with fewer than 50 untreated patients were excluded.}
<<Dataset_table_untreated, results='asis'>>=
if(!meta.analysis) {
  data.counts <- as.data.frame(sapply(esets.rfs.untreated, function(x) ncol(exprs(x))))
  colnames(data.counts) <- "Number of samples"
  data.counts <- rbind(data.counts, sum(data.counts[,1]))
  rownames(data.counts)[nrow(data.counts)] <- "Sum"
  xtable(data.counts)
}
@


\pagebreak
<<single_gene, cache=FALSE, include=FALSE>>=
if(meta.analysis) {
  knitr.text <- lapply(1:length(entrez.ids), function(current.index) knit_expand(file='single.gene.brca.meta.analysis.Rnw'))
} else {
  knitr.text <- lapply(1:length(entrez.ids), function(current.index) knit_expand(file='single.gene.brca.survival.Rnw'))
}
@

\Sexpr{knit(text=unlist(knitr.text))}

\pagebreak

<<replicate_original, fig.width=12, fig.height=8, out.width="0.95\\textwidth", eval=FALSE>>=
par(mfrow=c(2,3))
par(mar=c(5.1, 0, 0, 2.1))
# only include expression sets from the original study
esets.to.include <- esets.os[c("DUKE", "TRANSBIG")]
for(current.index in match(c("HMGCR", "HMGCS1", "MVD", "FDPS", "ACAT2", "MVK"), gene.names)) {
  esets.with.gene <- esets.to.include[sapply(esets.to.include, function(x) entrez.ids[{{current.index}}] %in% fData(x)$EntrezGene.ID)]
  esets.with.gene <- lapply(esets.with.gene, function(eset) {
    current.entrez.id.index <- which(fData(eset)$EntrezGene.ID == entrez.ids[{{current.index}}])
    return(eset[,!is.na(exprs(eset))[current.entrez.id.index,]])
    })
  # annotate with dataset
  eset.names <- names(esets.with.gene)
  esets.with.gene <- lapply(names(esets.with.gene), function(x) {
    eset.toreturn <- esets.with.gene[[x]]
    eset.toreturn$data.source <- x
    return(eset.toreturn)
    })
  names(esets.with.gene) <- eset.names
  
  survival.df.list <- lapply(esets.with.gene, function(x) {
    current.df <- get.survival.data.for.plotting(x, entrez.ids=entrez.ids[{{current.index}}], num.quantiles=2, survival.type="overall.survival", time.unit="years")
    current.df <- current.df[-grep(".expression$", colnames(current.df))]
  })
  
  survival.df <- do.call(rbind, survival.df.list)
  
  surv.time <- survival.df$years_to_event
  surv.event <- survival.df$event_status
  groups <- survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".quantile")]
  #risk.vals <- -survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".expression")]
  group.names <- paste(gene.names[{{current.index}}], levels(survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".quantile")]))
  datasets <- survival.df$data.source
  main.title <- paste0("Meta-dataset: ", gene.names[{{current.index}}])
  
  levels(groups) <- paste0(levels(groups), "     ")
  
  my.df <- data.frame(surv.obj=Surv(time=surv.time, event=surv.event), groups=groups, datasets=datasets)
  
  if(strata.term==TRUE) {
    pval.for.plot <- summary(coxph(surv.obj ~ groups + strata(datasets), my.df))$sctest["pvalue"]
      hr.out <- survcomp::hazard.ratio(x=groups, surv.time=surv.time, surv.event=surv.event, strat=datasets)
  } else {
    pval.for.plot <- summary(coxph(surv.obj ~ groups, my.df))$sctest["pvalue"]
      hr.out <- survcomp::hazard.ratio(x=groups, surv.time=surv.time, surv.event=surv.event)
  }
  text <- paste(sprintf("HR: %.3f (%.3f-%.3f);", hr.out$hazard.ratio, hr.out$lower, hr.out$upper), sprintf("Logrank p = %.5f", pval.for.plot))

  km.coxph.plot(surv.obj ~ groups, my.df, x.label="Time (years)", y.label = ylab, main.title=main.title, show.n.risk = TRUE, n.risk.step=5, leg.text = levels(my.df$groups), .col=RColorBrewer::brewer.pal(length(levels(my.df$groups)), name="Dark2"),leg.pos="topright", leg.inset=0, n.risk.cex=0.85, cex=0.4, o.text=text)
}
@

%Original figure:

%\includegraphics[width=0.9\textwidth]{metabolism-survival.jpg}

\end{document}