\pagebreak
\section{\Sexpr{gene.names[{{current.index}}]}}

<<Single_gene_metaanalysis_load_data_{{current.index}}, include=FALSE, cache=FALSE>>=
# Remove patients with NA values for that gene
esets.with.gene <- esets.rfs[sapply(esets.rfs, function(x) entrez.ids[{{current.index}}] %in% fData(x)$EntrezGene.ID)]
esets.with.gene <- lapply(esets.with.gene, function(eset) {
  current.entrez.id.index <- which(fData(eset)$EntrezGene.ID == entrez.ids[{{current.index}}])
  eset.toreturn <- eset[,!is.na(exprs(eset))[current.entrez.id.index,]]
  if(basal.only) {
    eset.toreturn <- eset.toreturn[,eset.toreturn$subtype == "Basal"]
  }
  return(eset.toreturn)
  })

survival.df.list <- lapply(esets.with.gene, function(x) {
  current.df <- get.survival.data.for.plotting(x, entrez.ids=entrez.ids[{{current.index}}], num.quantiles=2, survival.type="tumor.recurrence", time.unit="years", additional.colnames.to.keep = c("subtype"))
})

survival.df.list <- lapply(survival.df.list, function(survival.df) {
  ylab="Recurrence-Free Survival"
  surv.cens.obj <- survcomp::censor.time(survival.df$years_to_event, survival.df$event_status, time.cens=10)
  survival.df$years_to_event <- surv.cens.obj$surv.time.cens
  survival.df$event_status <- surv.cens.obj$surv.event.cens
  return(survival.df)
})

# Remove datasets with zero events for either the low or high group
survival.dfs.to.keep <- sapply(survival.df.list, function(current.survival.df) {
  min(table(current.survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".quantile")][current.survival.df$event_status == 1])) != 0
  })
print(sum(!survival.dfs.to.keep))
survival.df.list <- survival.df.list[survival.dfs.to.keep]
@

<<survival_grid_{{current.index}}, fig.width=12, fig.height=12, out.width="1.0\\textwidth", cache=FALSE>>=
orig.mfrow <- par("mfrow")
par(mfrow=c(4,4))
for(i in 1:length(survival.df.list)) {
  survival.df <- survival.df.list[[i]]
  current.dataset.name <- names(survival.df.list)[i]
  surv.time <- survival.df$years_to_event
  surv.event <- survival.df$event_status
  groups <- survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".quantile")]
  expression <- survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".expression")]
  group.names <- paste(gene.names[{{current.index}}], levels(survival.df[,paste0("geneid.", entrez.ids[{{current.index}}], ".quantile")]))
  main.title <- current.dataset.name
  ylab <- "RFS"
  
  #levels(groups) <- paste0(levels(groups))
  
  my.df <- data.frame(surv.obj=Surv(time=surv.time, event=surv.event), groups=groups)
  
  km.coxph.plot(surv.obj ~ groups, my.df, x.label="Time (years)", y.label = ylab, main.title=main.title, show.n.risk = FALSE, leg.text = levels(my.df$groups), leg.pos="topright", leg.bty="n", leg.inset=0, n.risk.cex=0.85, cex=0.4)
}
par(mfrow=orig.mfrow)
@

<<singlegene_metaanalysis_forestplot_{{current.index}}, fig.width=5, fig.height=7, out.width="0.5\\textwidth", cache=FALSE>>=
if(basal.only) {
  xlim=c(-6,6)
  alim=c(-6,6)  
  at=log(c(1/16,1/4, 1, 4, 16))
} else {
  xlim=c(-3,3)
  alim=c(-3,3)
  at=log(c(.25, 0.5, 1, 2, 4))
}

meta.stats <- create.forest.plot(survival.df.list, surv.time.colname = "years_to_event", surv.event.colname = "event_status", risk.val.colname = paste0("geneid.", entrez.ids[{{current.index}}], ".quantile"), stat = "hazard.ratio", main=paste0("Meta-analysis: ", gene.names[{{current.index}}]), xlim=xlim, alim=alim, at=at)

fixed.effects.pval[{{current.index}}] <- meta.stats$rma.fixed$pval
# create.forest.plot returns log2(HR)
fixed.effects.estimate[{{current.index}}] <- exp(as.vector(meta.stats$rma.fixed$b))
fixed.effects.lower[{{current.index}}] <- exp(meta.stats$rma.fixed$ci.lb)
fixed.effects.upper[{{current.index}}] <- exp(meta.stats$rma.fixed$ci.ub)
@

\noindent Fixed effects model:
\Sexpr{sprintf("%.02f [%.02f, %.02f], p = %.1E", exp(as.vector(meta.stats$rma.fixed$b)), exp(meta.stats$rma.fixed$ci.lb), exp(meta.stats$rma.fixed$ci.ub), meta.stats$rma.fixed$pval)}

\noindent Random effects model:
\Sexpr{sprintf("%.02f [%.02f, %.02f], p = %.1E", exp(as.vector(meta.stats$rma.random$b)), exp(meta.stats$rma.random$ci.lb), exp(meta.stats$rma.random$ci.ub), meta.stats$rma.random$pval)}
